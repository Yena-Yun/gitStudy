<<<<<<< HEAD
사용자 A와 B가 작성한 파일입니다
=======
사용자 B와 A가 작성한 파일입니다
>>>>>>> 5191bf80541c043579997c029f96b985ff650046
1. 계정 정보 등록
	git config --global user.name '사용자이름'
	git config --global user.email '사용자이메일'
2. 폴더를 git이 관리하는 폴더로 만들기
	git init
	git checkout -b main : main branch를 만들어서 해당 브랜치로 이동
	git status : 현재 상태 확인
3. 파일을 생성하고 add, commit 해보기
	git add : 변경이 있었던 파일을 staging area에 추가
		git add gitStudy.txt
	git commit : 변경 내용을 기록
		git commit -m '[A]처음으로 git commit 한 날'
	git log : log 확인
4. 파일을 수정하고 add, commit 해보기
	git add . : 수정내역이 있는 모든 파일을 staging area에 추가
	git commit : commit 메세지를 자세히 적어야 한다면 -m 옵션을 제외하고 commit을 진행
	text 에디터가 나오면 'i'를 눌러서 입력모드로 전환하고 메세지를 구체적으로 작성,
	작성이 끝나면 'esc :wq'(저장하고 나가기)를 입력해 commit을 완료
5. git reset 
	git reset --soft <commit id> : 내역을 되돌리고 commit을 취소(staging 상태) - stage에는 올라가 있지만 commit은 안된 상태 (commit만 취소한 상태)
	git reset --mixed <commit id>(기본값) : 내역을 되돌리고 staging도 취소 (soft랑 둘다 파일은 안 되돌림) 
	(커밋을 기록 남기기 위해서는 stage에 올려야 중간단계 commit예정인 애들이 stage에 올라가 있음 stage에 안 올라가 있으며 커밋 불가)
	git reset --hard <commit id> : 해당 commit 지점으로 파일을 되돌린다.
		reset을 하면 내역을 되돌리기 때문에, log명령어로 commit id를 볼 수 없다.
	git reflog : 모든 내역을 확인하는 reflog를 사용해서 모든 commit id 확인가능
	
	* git add . = staging하기